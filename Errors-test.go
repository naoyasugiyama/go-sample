package main

import (
	"fmt"
	"math"
	"strconv"
	"time"
)

/*
 error型 fmt.Stringer型に似た組み込みインターフェイス
 type error interface {
	 Error() string
 }
*/

type mError struct {
	When time.Time
	What string
}

func (e *mError) Error() string {
	return fmt.Sprintf("at %v, %s", e.When, e.What)
}

func run() error {
	return &mError{
		time.Now(),
		"I don't work",
	}
}

// Exercise Errors

type ErrNegativeSqrt float64

func (e ErrNegativeSqrt) Error() string {
	/*
		fmt.Sprint(float64(e))で変換しないと無限ループに陥る

		> fmt パッケージのさまざまな表示ルーチンは、 error の表示を求められたときにErrorメソッドを呼び出しを自動的に実行します
		> Error()
		   runtime: goroutine stack exceeds 1000000000-byte limit
		   fatal error: stack overflow
		   runtime stack:
		   runtime.throw(0x4e2098, 0xe)
		   runtime.newstack()
		   runtime.morestack()

		   goroutine 1 [running]:
		   fmt.(*pp).handleMethods(0xc007574dd0, 0x76, 0xc0200b5500)
		   fmt.(*pp).printArg(0xc007574dd0, 0x4c1c80, 0xc00753dd68, 0x76)
		   fmt.(*pp).doPrintf(0xc007574dd0, 0x4e6411, 0x1f, 0xc0200b5660, 0x1, 0x1)
		   fmt.Sprintf(0x4e6411, 0x1f, 0xc0200b5660, 0x1, 0x1, 0x4c4cc0, 0x42c301)
		   main.ErrNegativeSqrt.Error(...)
		   fmt.(*pp).handleMethods(0xc007574c30, 0x76, 0xc0200b5d01)
		   fmt.(*pp).printArg(0xc007574c30, 0x4c1c80, 0xc00753dd58, 0x76)
			.......
		   main.(*ErrNegativeSqrt).Error(0xc00753dcc8, 0x4c1c80, 0xc00753dcc8)
		           <autogenerated>:1 +0xa0 fp=0xc0200ba740 sp=0xc0200ba6e8 pc=0x4a6ed0
		   exit status 2
	*/
	//	return fmt.Sprintf("cannot Sqrt negative number: %v", e)
	return fmt.Sprintf("cannot Sqrt negative number: %v", float64(e))
}

func Sqrt(x float64) (float64, error) {
	if x < 0 {
		err := ErrNegativeSqrt(x)
		return x, err
	}

	last, z := x, float64(1.0)

	for math.Abs(z-last) >= 1.0e-6 {
		last, z = z, z-(z*z-x)/(2*z)
	}

	if z < 0 {
		return 0, ErrNegativeSqrt(x)
	}

	return z, nil
}

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
	}

	i, err0 := strconv.Atoi("555")
	if err0 != nil {
		fmt.Printf("couldn't convert number: %v\n", err0)
		return
	}
	fmt.Println("Converted integer:", i)

	fmt.Println("---------------------")

	fmt.Println(Sqrt(2))
	fmt.Println(Sqrt(-2))
}
